AWSTemplateFormatVersion: "2010-09-09"
Transform: 'AWS::Serverless-2016-10-31'
Description: instagram-bot base stack

Resources:

  InstagramBotSharedS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-shared-bucket
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      Tags:
        - Key: Stack
          Value: !Sub ${AWS::StackName}
        - Key: Resource
          Value: S3
  
  InstagramBotRepository:
    Type: AWS::ECR::Repository
    Properties:
      ImageScanningConfiguration:
        ScanOnPush: True
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                  "rulePriority": 1,
                  "description": "Delete untagged images",
                  "selection": {
                      "tagStatus": "untagged",
                      "countType": "imageCountMoreThan",
                      "countNumber": 2
                  },
                  "action": {
                      "type": "expire"
                  }
              }
            ]
          }
      RepositoryName: !Sub ${AWS::StackName}-repo
      Tags:
        - Key: Stack
          Value: !Sub ${AWS::StackName}
        - Key: Resource
          Value: ECR
  
  InstagramBotServerlessFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures: 
        - x86_64
      Description: Search for new images and handle them if found.
      Environment:
        Variables:
          INSTAGRAM_SECRET_ARN: !Ref InstagramBotVariousSecrets
      Events:
        ScheduleEvent:
          Properties:
            Description: Serverless Function trigger mechanism.
            Enabled: true
            Name: !Sub ${AWS::StackName}-serverless-function-event-trigger
            Schedule: 'rate(1 hour)'
          Type: Schedule
      FunctionName: !Sub ${AWS::StackName}-serverless-function
      ImageUri: !Sub ${InstagramBotRepository.RepositoryUri}:latest
      PackageType: Image
      Tags:
        Stack: !Sub ${AWS::StackName}
        Resource: ECR
      Timeout: 300

  InstagramBotUserGroup:
    Type: AWS::IAM::Group
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties: 
      GroupName: InstagramBots
      Policies: 
        - PolicyName: !Sub ${AWS::StackName}-user-policy
          PolicyDocument: 
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:ListBucket"
                Resource: !GetAtt InstagramBotSharedS3Bucket.Arn
  
  InstagramBotUser:
    Type: AWS::IAM::User
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties: 
      Groups: 
        - !Ref InstagramBotUserGroup
      Tags:
        - Key: Stack
          Value: !Sub ${AWS::StackName}
        - Key: Resource
          Value: IAMUser
      UserName: !Sub ${AWS::StackName}-user

  InstagramBotUserAccessKey:
    Type: AWS::IAM::AccessKey
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Status: Active
      UserName: !Ref InstagramBotUser
  
  InstagramBotUserCredentialsSecret:
    Type: AWS::SecretsManager::Secret
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Description: Access and Secret keys for the InstagramBot.
      Name: !Sub ${AWS::StackName}-user-account-secrets
      SecretString: !Sub |
        '{
          "USER_NAME":"${InstagramBotUser}",
          "ACCESS_KEY":"${InstagramBotUserAccessKey}",
          "SECRET_KEY":"${InstagramBotUserAccessKey.SecretAccessKey}"
        }'
      Tags:
        - Key: Stack
          Value: !Sub ${AWS::StackName}
        - Key: Resource
          Value: IAMUser
  
  InstagramBotVariousSecrets:
    Type: AWS::SecretsManager::Secret
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Description: Various Keys needed by the InstagramBot.
      Name: !Sub ${AWS::StackName}-user-various-secrets
      SecretString: '{}'
      Tags:
        - Key: Stack
          Value: !Sub ${AWS::StackName}
        - Key: Resource
          Value: IAMUser

Outputs:
  InstagramBotUser:
    Description: The IAM User of the Instagram bot stack.
    Value: !Ref InstagramBotUser
  InstagramBotUserCredentials:
    Description: Access and Secret key for the Instagram bot.
    Value: !Ref InstagramBotUserCredentialsSecret
  InstagramBotRepository:
    Description: Repository of Instagram bot's Lambda code.
    Value: !Ref InstagramBotRepository
  InstagramBotVariousSecrets:
      Description: Various Keys needed by the InstagramBot.
      Value: !Ref InstagramBotVariousSecrets

